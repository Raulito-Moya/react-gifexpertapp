{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","helpers/getGifs.js","components/GiftGridItem.js","components/GiftGrid.js","hooks/useFetchGifts.js","GiftExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setInputvalue","onSubmit","e","preventDefault","console","log","trim","length","cats","type","value","onChange","target","getGifts","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GiftGridItem","className","src","alt","Giftgrid","loading","state","setstate","useEffect","imgs","useFetchGifts","GiftExpertApp","defaultCategories","categories","ReactDOM","render","document","getElementById"],"mappings":"gLAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,qBCJDQ,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KA8B5C,OAEK,uBAAMC,SAnBU,SAACC,GACfA,EAAEC,iBACHC,QAAQC,IAAI,eAAgBN,GAE1BA,EAAWO,OAAOC,OAAS,IAE1BV,GAAc,SAAAW,GAAI,OAAKT,GAAL,mBAAoBS,OACtCR,EAAc,MAYlB,UACG,8CACA,4BAAID,IACJ,uBACAU,KAAK,OACLC,MAAOX,EACPY,SAhCiB,SAAET,GAEvBF,EAAcE,EAAEU,OAAOF,c,+BCVdG,EAAQ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdC,EAFc,iDAEmCC,UAAUH,GAF7C,+DAGDI,MAAMF,GAHL,cAGdG,EAHc,gBAIGA,EAAKC,OAJR,uBAIZC,EAJY,EAIZA,KAEHC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACtB,MAAO,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVzB,kBAebM,GAfa,4CAAH,sDCEZO,EAAe,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAIhC,OACI,sBAAKc,UAAU,gDAAf,UAEI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAKA,QCHJO,EAAW,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECJX,SAAEA,GAAe,IAAD,EAEhBhB,mBAAS,CAE/BuB,KAAM,GACNa,SAAS,IAL6B,mBAEnCC,EAFmC,KAE5BC,EAF4B,KA6BxC,OArBHC,qBAAW,WAERxB,EAASC,GACNxB,MAAM,SAAAgD,GAGNF,EAAS,CACFf,KAAKiB,EACLJ,SAAQ,IAGV9B,QAAQC,IAAIiC,QAMpB,CAACxB,IAIMqB,EDvBqBI,CAAezB,GAAnCa,EAF2B,EAEhCN,KAAaa,EAFmB,EAEnBA,QAIjB,OACI,qCACF,oBAAIJ,UAAU,kCAAd,SAAiDhB,IAEhDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,sDAAf,SAGiBH,EAAOJ,KAAK,SAACC,GAAD,OACV,cAAC,EAAD,eAEIA,GADCA,EAAIC,aESlBe,EA5Bc,SAAC,GAA8B,IAAD,IAA3BC,yBAA2B,MAAP,GAAO,IAIlB3C,mBAAS2C,GAJS,mBAI/CC,EAJ+C,KAInC7C,EAJmC,KAUtD,OAAO,qCACF,+CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGQ6C,EAAWnB,KAAK,SAACT,GAAD,OAEb,cAAC,EAAD,CAAyBA,SAAUA,GAApBA,UCfpC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1B3D,M","file":"static/js/main.3479a42a.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n \r\n    const [inputValue, setInputvalue] = useState('');\r\n\r\n\r\n\r\n    const handleInputChange =( e ) =>{ //da el valor mientras cambie en el form\r\n\r\n        setInputvalue(e.target.value)\r\n      \r\n        \r\n    }\r\n\r\n    const handleSubmit = (e) =>{   //hace le submit\r\n           e.preventDefault(); //para prevenir el comportamiento por defecto del Form\r\n          console.log('handleSubmit', inputValue)\r\n\r\n         if(inputValue.trim().length > 2){\r\n\r\n             setCategories(cats => [inputValue, ...cats ]); //le paso a ala lista el valor que haya en el form\r\n             setInputvalue('') //se lo paso a cero otra vez\r\n\r\n         }\r\n\r\n     \r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        \r\n         <form onSubmit={handleSubmit}>\r\n            <h2>Add Category</h2>\r\n            <p>{inputValue}</p>\r\n            <input \r\n            type=\"text\" \r\n            value={inputValue}\r\n            onChange={ handleInputChange }\r\n            /> \r\n        </form>\r\n       \r\n    )\r\n}\r\n\r\n\r\n/*AddCategory.propTypes ={\r\n     setCategories: PropTypes.func.isRequired\r\n\r\n}*/","\r\n    export const getGifts = async( category)=>{\r\n\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)  }&api_key=I8JARghROVZYV6qomX3KRJ6JbLveIr2h&limit=10` //encoide uri es para que la categoria elimine los espacios y ponga +\r\n        const resp = await fetch(url);\r\n        const { data } = await resp.json()\r\n\r\n       const gifs = data.map( img =>{ //de cada elemento estraigo los siguientes eleemetnos en un array\r\n              return {\r\n                   id: img.id,\r\n                   title: img.title,\r\n                   url: img.images?.downsized_medium.url //el signo de ? es para ver si vienen las imagenes entonces que lo utilize\r\n              }\r\n         })\r\n       \r\n        \r\n        return gifs\r\n\r\n     }","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const GiftGridItem = ({title,url}) => {\r\n  \r\n    //console.log({id,title,url})\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeInDownBig'>\r\n           \r\n            <img src={url} alt={title}/>\r\n            <p>{ title }</p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nGiftGridItem.propTypes ={\r\n    url: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired\r\n}\r\n","import React  from 'react'\r\nimport Proptypes from 'prop-types';\r\nimport ReactDOM from \"react-dom\";\r\nimport { useFetchGifts } from '../hooks/useFetchGifts'\r\n// import { getGifts } from '../helpers/getGifs'\r\nimport { GiftGridItem } from './GiftGridItem'\r\n\r\n//nota importamos useeffect ya que con el  eejemplo del count al dar click en el boton React intrpreta que hay un cambio en los eleementos y lee el codigo nuevamente y pasa el proceso de el fetch de nuevo\r\nexport const Giftgrid = ({category}) => {\r\n\r\n const {data:images, loading } = useFetchGifts( category );\r\n\r\n \r\n\r\n    return ( \r\n        <>\r\n      <h3 className='animate__animated animate__flip'>{category}</h3>\r\n  \r\n      {loading && <p className='animate__animated animate__flash'>Loading</p> /* esto significa que si no es true no regresa nada*/  } \r\n\r\n     <div className='card-grid  animate__animated animate__fadeInDownBig'>\r\n              {   \r\n           \r\n                      images.map( (img) =>( \r\n                        <GiftGridItem \r\n                        key={img.id}\r\n                        {...img}\r\n                         />\r\n                    ))\r\n                   } \r\n             \r\n               </div> \r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nGiftgrid.propTypes ={\r\n    \r\n  category: Proptypes.string.isRequired\r\n}\r\n\r\n\r\n","import {useState ,useEffect} from 'react'\r\nimport { getGifts } from '../helpers/getGifs'\r\n\r\n\r\nexport const useFetchGifts = ( category ) => {\r\n\r\n   const [state, setstate] = useState({\r\n        \r\n       data: [],\r\n       loading: true\r\n   })\r\n\r\n  useEffect( ()=>{\r\n       \r\n     getGifts(category)\r\n       .then( imgs =>{\r\n\r\n       // setTimeout(()=>{ //deje el settimeout para estilo porque el api responde rapido\r\n        setstate({\r\n               data:imgs,\r\n               loading:false \r\n               \r\n           });\r\n             console.log(imgs)\r\n\r\n      // },1000)\r\n     })\r\n          \r\n\r\n  }, [category])  //el array es una lista de dependecinas es com el componentdidMount en react con clases ,hace que el compoenente se dispara una sola vez o sea sia l acategoria cambia\r\n   \r\n \r\n \r\n     return state\r\n\r\n}\r\n\r\n","import React, {useState} from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport {AddCategory} from './components/AddCategory'\r\nimport { Giftgrid } from \"./components/GiftGrid\";\r\n\r\n\r\nexport const GiftExpertApp = ({ defaultCategories = [] })=>{  //este default categorie se puso para hacer el eejemplo de la prueba\r\n\r\n \r\n    // const [categories, setCategories] = useState([ 'One Punch']);\r\n     const [categories, setCategories] = useState(defaultCategories);\r\n      /*const handleAdd = ()=>{\r\n         \r\n               //setCategories([...categories, 'Naruto']) tmbien puede tener un callback que es el estado anterior\r\n               setCategories( cats => [...cats, 'Naruto'])     \r\n      }*/\r\n     return <>\r\n          <h2>GiftExpertApp</h2>\r\n          <AddCategory setCategories={setCategories}/>\r\n          <hr />\r\n         \r\n              {  \r\n                  categories.map( (category) =>(\r\n                     \r\n                     <Giftgrid key={category} category={category}/>\r\n                  ))\r\n              }\r\n         \r\n           </>\r\n   \r\n\r\n      \r\n}\r\n\r\nexport default GiftExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\nimport GiftExpertApp from './GiftExpertApp'\n\n\n\nReactDOM.render(\n  <GiftExpertApp/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}